#!/usr/bin/env python
import traceback
import sys
import MySQLdb

'''
Make sure you set the proper database credentials

Takes list of location_ids
Determines which zone each location is in
Numbers each location, grouped by zone, sequentially from West to East
Outputs the location_id, BOS number, zone ID, latitude, and longitude in a CSV
This becomes the input for update_bos_number.py
'''

zone1 = [(40.7172342308028,-73.934652190094),(40.7090789135432,-73.930954864288),(40.7080075699955,-73.9361858326486),(40.7069302197561,-73.9396969264646),(40.7061555735088,-73.9480898246775),(40.7140669011042,-73.9493723283586),(40.7154635902265,-73.9495981652684),(40.7160976099236,-73.9429433774754),(40.7163687169951,-73.9401125016363),(40.715828862582,-73.9400255699848),(40.7172342308028,-73.934652190094)]

zone2= [(40.7069183161462,-73.9397145985806),(40.7076036509608,-73.9376398963401),(40.7080614337966,-73.9360085018918),(40.7083659390243,-73.9343296527767),(40.7087043165581,-73.9327242899738),(40.7098644084876,-73.9279580931071),(40.7085373407324,-73.9274312490474),(40.7078492586745,-73.9272252669212),(40.7055563647663,-73.9265779782077),(40.702849004204,-73.9335226321447),(40.7026746009757,-73.9339509455066),(40.70190998876,-73.9369816787773),(40.703373495406,-73.9376312940737),(40.7040666570255,-73.9385990364947),(40.7047605197691,-73.9392719728934),(40.7054999095242,-73.9394982803821),(40.7069183161462,-73.9397145985806)]

zone3 = [(40.70190998876,-73.9369816787773),(40.7026746009757,-73.9339509455066),(40.702849004204,-73.9335226321447),(40.6980944991944,-73.9251491497738),(40.6982108294117,-73.9240525162199),(40.6983496387267,-73.9227438385812),(40.6942806043461,-73.926735325778),(40.6941408979362,-73.9264812826841),(40.6927742133493,-73.9278111903484),(40.6938634108065,-73.9297019266194),(40.6936919193224,-73.9312032242444),(40.6948554962472,-73.9314578449915),(40.6967366149104,-73.9347969823615),(40.698565296001,-73.9382155619408),(40.6986732586048,-73.9382863635783),(40.7007221268642,-73.9419507568205),(40.7004245501773,-73.9443879000868),(40.7005451899749,-73.9444027660867),(40.7039144730283,-73.9481681627434),(40.7041293489193,-73.947863696008),(40.7061555735088,-73.9480898246775),(40.7069183161462,-73.9397145985806),(40.7048147644886,-73.9393123687588),(40.7040584733822,-73.9385876110928),(40.703373495406,-73.9376312940737),(40.70190998876,-73.9369816787773)]

zone4 =[(40.702849004204,-73.9335226321447),(40.7055563647663,-73.9265779782077),(40.7056797310106,-73.9260893059329),(40.6991901560348,-73.9146811314975),(40.6980944991944,-73.9251491497738),(40.702849004204,-73.9335226321447)]

zone5 = [(40.7001173249556,-73.9062030232284),(40.6995640035545,-73.9111413523664),(40.6995573830928,-73.9111998306737),(40.6991901560348,-73.9146811314975),(40.6992660102899,-73.9148142916277),(40.7056797310106,-73.9260893059329),(40.7055563647663,-73.9265779782077),(40.7057493010739,-73.9266314339676),(40.7085373407324,-73.9274312490474),(40.7098644084876,-73.9279580931071),(40.7110412967007,-73.9232339716411),(40.7118943424003,-73.9216866258004),(40.713366625558,-73.9199052051835),(40.7036509999944,-73.903519153437),(40.7023106338377,-73.9013892199043),(40.7002708839334,-73.9048796759497),(40.7001173249556,-73.9062030232284)]

zone6 = [(40.6927742133493,-73.9278111903484),(40.6941408979362,-73.9264812826841),(40.6942806043461,-73.926735325778),(40.6983496387267,-73.9227438385812),(40.6995618764759,-73.9111435973838),(40.7001173249556,-73.9062030232284),(40.6967311037821,-73.9004632744721),(40.6955966626895,-73.8990470015365),(40.6914383617691,-73.9012408852565),(40.6910776308782,-73.9018994737668),(40.6885683021564,-73.904142208929),(40.6882898342642,-73.904333550568),(40.6873115224946,-73.9050057557657),(40.6861885331992,-73.9057081271343),(40.6860105577977,-73.9055351613459),(40.6822343430321,-73.9092746112393),(40.6927742133493,-73.9278111903484)]

zones = [zone1,zone2,zone3,zone4,zone5,zone6]

def point_inside_polygon(x,y,poly):
    n = len(poly)
    inside =False

    p1x,p1y = poly[0]
    for i in range(n+1):
        p2x,p2y = poly[i % n]
        if y > min(p1y,p2y):
            if y <= max(p1y,p2y):
                if x <= max(p1x,p2x):
                    if p1y != p2y:
                        xinters = (y-p1y)*(p2x-p1x)/(p2y-p1y)+p1x
                    if p1x == p2x or x <= xinters:
                        inside = not inside
        p1x,p1y = p2x,p2y

    return inside

def findZone(location_id, lat, lng):
    # Hardcoded for locations that fall just outside of boundaries
    if (location_id == 109 or location_id == 575):
        return 3
    i = 1
    for zone in zones:
        if (point_inside_polygon(lat, lng, zone)):
            return i
        i += 1
    return -1

def main():
    if len(sys.argv) != 2:
        print 'Usage: %s <filename>' % sys.argv[0]
        sys.exit(-1)

    con = None
    try:
        f = open(sys.argv[1])
        con = MySQLdb.connect('<hostname>','<username>','<password>','<database>')
        cur = con.cursor()
        ids = []
        locations_by_zone = [[],[],[],[],[],[]]
        for line in f.readlines():
            zone_id = -1
            location_id = int(line)
            query = 'SELECT id, lat, lng, address FROM aib_location WHERE aib_location.id=%d;' % location_id
            cur.execute(query)
            for row in cur:
                zone_id = findZone(row[0], row[1], row[2])
            if (zone_id <= -1):
                print 'Failed to find zone for location_id: %d\t%s\t%f\t%f' % (row[0], row[3], row[1], row[2])
            else:
                locations_by_zone[zone_id-1].append({'id':row[0],'lat':row[1],'lng':row[2]})
    
        num = 1
        zone_id = 1
        for zone_locations in locations_by_zone:
            for location in sorted(zone_locations, key=lambda location: location['lng']):
                print '%d,%d,%d,%f,%f' % (location['id'], num, zone_id, location['lat'], location['lng'])
                num += 1
            zone_id += 1
    except Exception, e:
        print 'Error occurred'
        traceback.print_exc()
        sys.exit(1)
    finally:
        if con:
            con.close()

if __name__ == '__main__':
    main()
